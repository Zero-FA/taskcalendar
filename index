# Create a single-file static app "index.html" that includes everything:
# - Modern UI
# - Backlog + New Task modal
# - Trainer tabs (All/Sean/Sr Trainer 2/Sr Trainer 3)
# - Weekly grid (Mon–Sun, 8a–6p), drag & drop
# - Week-span tasks (Mon–Fri) behavior
# - Export .ics
# - LocalStorage persistence
# This file can be the ONLY file in a GitHub repo and deployed on Vercel as a static site.

html = r"""<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Weekly Planner</title>
<meta name="description" content="Drag-and-drop weekly scheduler for trainers">
<style>
  :root{
    --bg:#0b0b0c; --panel:#111214; --panelAlt:#15171a; --border:#1e2126; --text:#e9eaee; --muted:#8a919e;
    --accent:#6da7ff; --accent2:#77e0c1; --accent3:#f6c76d;
  }
  *{box-sizing:border-box}
  html,body{height:100%}
  body{margin:0;color:var(--text);font:15px/1.4 ui-sans-serif,system-ui,-apple-system,"Segoe UI",Inter,Roboto,Arial;
    background:radial-gradient(1200px 700px at 10% -10%, #101216 0%, #0b0b0c 55%),
               radial-gradient(900px 700px at 110% 10%, #101216 0%, rgba(16,18,22,0) 50%), var(--bg);
  }
  .btn{background:#171a1f;border:1px solid #262a31;color:#dfe3ea;border-radius:12px;padding:.5rem .75rem;font-size:.875rem;cursor:pointer}
  .btn:active{transform:translateY(1px)}
  .pill{padding:.5rem .75rem;border-radius:9999px;font-size:.8125rem;color:#cfd3da;cursor:pointer;border:1px solid transparent}
  .pill[data-active="true"]{background:linear-gradient(180deg,#1b1e23,#15171a);border:1px solid #252a31;color:#fff;box-shadow:inset 0 0 0 1px rgba(255,255,255,.02)}
  .card{border-radius:16px;border:1px solid var(--border);background:linear-gradient(180deg,var(--panel),var(--panelAlt));overflow:hidden}
  .task{border-radius:12px;border:1px solid #262a31;padding:.75rem;background:#0f1115;transition:box-shadow .15s;cursor:grab}
  .task:hover{box-shadow:0 6px 18px rgba(0,0,0,.35), 0 0 0 1px rgba(255,255,255,.02) inset}
  .gridCell{border-right:1px solid var(--border);border-bottom:1px solid var(--border);position:relative;background:linear-gradient(180deg,#0e1013,#0c0d10)}
  .gridHeader{display:flex;align-items:center;justify-content:center;background:#0f1115;font-weight:600}
  .gridSide{padding:.25rem .5rem;font-size:.75rem;color:#a9b0ba;background:#0f1115}
  .placement{position:absolute;inset:4px 8px auto 8px;height:48px;border-radius:12px;border:1px solid #28303a;background:#101318;display:flex;align-items:center;justify-content:space-between;gap:.5rem;padding:.5rem .75rem;cursor:grab;box-shadow:0 6px 18px rgba(0,0,0,.35), inset 0 0 0 1px rgba(255,255,255,.03)}
  .placement[data-trainer="A"]{background:linear-gradient(180deg, rgba(109,167,255,.18), rgba(28,74,160,.18)); border-color:#2a3a55}
  .placement[data-trainer="B"]{background:linear-gradient(180deg, rgba(119,224,193,.2), rgba(51,162,134,.18)); border-color:#2a4a42}
  .placement[data-trainer="C"]{background:linear-gradient(180deg, rgba(246,199,109,.22), rgba(173,127,46,.18)); border-color:#4a3c20}
  .fab{position:fixed;right:16px;bottom:18px;width:56px;height:56px;border-radius:50%;background:linear-gradient(180deg,#1b7cff,#0f58cf);color:#fff;border:none;box-shadow:0 10px 30px rgba(0,0,0,.35);font-size:28px;line-height:56px;text-align:center;cursor:pointer;z-index:50}
  .layout{max-width:1120px;margin:28px auto;padding:0 16px}
  .pillbar{display:flex;flex-wrap:wrap;gap:8px;background:var(--panel);border:1px solid var(--border);border-radius:9999px;padding:6px}
  .header{display:flex;align-items:center;justify-content:space-between;margin-bottom:12px}
  .title{display:flex;gap:10px;align-items:center;font-weight:700;font-size:18px}
  .dot{width:10px;height:10px;border-radius:50%;background:linear-gradient(120deg,var(--accent),#9bc4ff)}
  .gridWrap{padding:12px}
  .legend{display:flex;gap:8px;flex-wrap:wrap;margin:0 0 10px 4px;font-size:12px;color:#cbd2db}
  .legend .key{display:flex;align-items:center;gap:6px;padding:4px 8px;border:1px solid var(--border);border-radius:999px;background:#0f1115}
  .sw{width:10px;height:10px;border-radius:3px}
  .sw.a{background:linear-gradient(180deg,#7db2ff,#4a84ff)}
  .sw.b{background:linear-gradient(180deg,#9df1d7,#55d2b0)}
  .sw.c{background:linear-gradient(180deg,#ffd88a,#f6c76d)}
  .toolbar{display:flex;align-items:center;gap:8px;padding:8px 12px;border-bottom:1px solid var(--border);background:#0f1115}
  .capacity{margin-left:auto;display:flex;gap:8px;align-items:center;font-size:12px;color:#aab2bd}
  .bar{width:110px;height:8px;border-radius:999px;background:#1a1e25;border:1px solid #262a31;overflow:hidden}
  .bar > i{display:block;height:100%;width:0;background:linear-gradient(90deg,#79e07a,#85a9ff)}
  /* Modal */
  .backdrop{position:fixed;inset:0;background:rgba(0,0,0,.6);display:none;align-items:center;justify-content:center;z-index:9999}
  .modal{width:560px;max-width:calc(100% - 24px);background:#0f1115;border:1px solid #262a31;border-radius:16px;overflow:hidden}
  .mh{padding:12px 14px;border-bottom:1px solid #262a31;font-weight:700}
  .mbody{padding:14px;display:grid;gap:12px}
  .row2{display:grid;grid-template-columns:1fr 1fr;gap:12px}
  .label{font-size:12px;color:#aab2bd}
  .input,.select{width:100%;padding:10px 12px;border-radius:10px;border:1px solid #2b3038;background:#0c0f13;color:#dfe3ea;font-size:14px}
  .actions{padding:12px 14px;border-top:1px solid #262a31;display:flex;gap:8px;justify-content:flex-end}
  @media (max-width: 900px){
    .grid{overflow:auto}
  }
</style>
</head>
<body>
<div class="layout">
  <header class="header">
    <div class="title"><span class="dot"></span>Weekly Planner</div>
    <div class="pillbar" id="trainerSwitch">
      <button class="pill" data-id="ALL" data-active="true">All</button>
      <button class="pill" data-id="A">Sean</button>
      <button class="pill" data-id="B">Sr Trainer 2</button>
      <button class="pill" data-id="C">Sr Trainer 3</button>
    </div>
  </header>

  <div class="grid2" style="display:grid;grid-template-columns:320px 1fr;gap:16px">
    <!-- Backlog -->
    <aside class="card">
      <div style="display:flex;align-items:center;justify-content:space-between;padding:10px 12px;border-bottom:1px solid var(--border)">
        <div><div style="font-weight:600">Up for grabs</div><div id="backlogCount" style="font-size:12px;color:var(--muted)">0 tasks</div></div>
        <button class="btn" id="newBtn" type="button">+ New</button>
      </div>
      <div style="display:grid;grid-template-columns:1fr auto;gap:8px;padding:8px 12px;border-bottom:1px solid var(--border)">
        <input id="search" class="input" placeholder="Filter (title or tag)">
        <button class="btn" id="clearBtn" type="button">Clear</button>
      </div>
      <div id="backlog" style="padding:12px;display:flex;flex-direction:column;gap:10px;max-height:70vh;overflow:auto"></div>
    </aside>

    <!-- Calendar -->
    <section class="card">
      <div class="toolbar">
        <div id="weekLabel" style="font-size:12px;color:#aab2bd"></div>
        <div class="capacity"><div class="bar"><i id="capFill"></i></div><span id="capText">0/40h</span></div>
        <button class="btn" id="prevWeek" type="button">◀︎</button>
        <button class="btn" id="nextWeek" type="button">▶︎</button>
        <button class="btn" id="exportIcs" type="button">Export .ics</button>
      </div>
      <div class="gridWrap">
        <div class="legend">
          <span class="key"><i class="sw a"></i> Sean</span>
          <span class="key"><i class="sw b"></i> Sr Trainer 2</span>
          <span class="key"><i class="sw c"></i> Sr Trainer 3</span>
        </div>
        <div class="grid" id="grid" style="display:grid;grid-template-columns:80px repeat(7, minmax(0,1fr));grid-auto-rows:56px;border:1px solid var(--border);border-radius:16px;overflow:hidden"></div>
      </div>
    </section>
  </div>
</div>

<button class="fab" id="fab" type="button" aria-label="New task">＋</button>

<!-- Modal -->
<div class="backdrop" id="modal">
  <div class="modal" role="dialog" aria-modal="true" aria-labelledby="mh">
    <div class="mh" id="mh">New Task</div>
    <div class="mbody">
      <div>
        <div class="label">Title</div>
        <input id="m_title" class="input" placeholder="SOP Draft: Tier 2 Refunds">
      </div>
      <div class="row2">
        <div>
          <div class="label">Estimated Duration (hours)</div>
          <input id="m_hours" class="input" type="number" step="0.5" min="0.5" value="1">
        </div>
        <div>
          <div class="label">Deadline/Span</div>
          <select id="m_span" class="select">
            <option value="none">None (fixed-hour task)</option>
            <option value="week1">Fill full week (Mon–Fri)</option>
          </select>
        </div>
      </div>
      <div class="row2">
        <div>
          <div class="label">Priority</div>
          <select id="m_priority" class="select">
            <option value="1">1 (High)</option>
            <option value="2" selected>2 (Normal)</option>
            <option value="3">3 (Low)</option>
          </select>
        </div>
        <div>
          <div class="label">Tags (comma)</div>
          <input id="m_tags" class="input" placeholder="SOP, Tier2">
        </div>
      </div>
    </div>
    <div class="actions">
      <button class="btn" id="m_cancel" type="button">Cancel</button>
      <button class="btn" id="m_create" type="button">Create</button>
    </div>
  </div>
</div>

<script>
(function(){
  // --- Config ---
  const HOUR_START=8, HOUR_END=18, WEEK_CAPACITY_HOURS=40, SLOT_MIN=60;
  const trainerNames = {A:'Sean', B:'Sr Trainer 2', C:'Sr Trainer 3'};
  const trainerColor = {A:'#6da7ff', B:'#77e0c1', C:'#f6c76d'};
  const STORAGE_KEY='weekly_planner_single_v1';

  // --- State ---
  let state = load() || {
    backlog: [
      {id:'t1', title:'SOP Draft: Tier 2 Refunds', tags:['SOP','Tier2'], est:240, priority:1},
      {id:'t2', title:'Video Edit: Cybersecurity Ep. 3', tags:['Video','Edit'], est:180, priority:2},
      {id:'t3', title:'TalentLMS: Quiz Build (10 Qs)', tags:['LMS','Quiz'], est:120, priority:2},
      {id:'t4', title:'Confluence Cleanup', tags:['Docs'], est:120, priority:3}
    ],
    schedules: {} // wkKey -> { placements: [ {id, taskId, title, est, slot, trainer} ] }
  };
  let trainerFilter = 'ALL';
  let weekStart = getWeekStart(new Date());

  // --- Helpers ---
  const $ = s=>document.querySelector(s);
  const $$ = s=>Array.from(document.querySelectorAll(s));
  function save(){ localStorage.setItem(STORAGE_KEY, JSON.stringify(state)); }
  function load(){ try{ return JSON.parse(localStorage.getItem(STORAGE_KEY)||''); }catch{return null;} }
  function getWeekStart(d0){
    const d=new Date(d0); const wd=d.getDay(); const diff=(wd===0?-6:1)-wd; d.setDate(d.getDate()+diff); d.setHours(0,0,0,0); return d;
  }
  function toISODate(d){ const y=d.getFullYear(), m=String(d.getMonth()+1).padStart(2,'0'), day=String(d.getDate()).padStart(2,'0'); return `${y}-${m}-${day}`; }
  function weekKey(d){ const onejan=new Date(d.getFullYear(),0,1); const millis=+d-+onejan+(onejan.getTimezoneOffset()-d.getTimezoneOffset())*60000; const w=Math.ceil((millis/86400000 + onejan.getDay()+1)/7); return `${d.getFullYear()}-W${String(w).padStart(2,'0')}`; }
  function fmtHM(d){ const h=d.getHours(), m=d.getMinutes(); const am=h>=12?'pm':'am'; const h12=h%12===0?12:h%12; return `${h12}:${String(m).padStart(2,'0')}${am}` }
  function clamp(n,min,max){ return Math.max(min, Math.min(max,n)) }

  // --- DOM refs ---
  const backlogEl = $('#backlog'), backlogCountEl=$('#backlogCount');
  const gridEl = $('#grid'), weekLabelEl=$('#weekLabel');
  const capFillEl=$('#capFill'), capTextEl=$('#capText');

  // --- Render ---
  function renderBacklog(){
    const q=($('#search').value||'').toLowerCase().trim();
    const items = state.backlog
      .filter(t => !q || t.title.toLowerCase().includes(q) || (t.tags||[]).some(tag=>tag.toLowerCase().includes(q)))
      .sort((a,b)=>(a.priority||9)-(b.priority||9));
    backlogEl.innerHTML='';
    backlogCountEl.textContent = `${state.backlog.length} task${state.backlog.length!==1?'s':''}`;
    for(const t of items){
      const el = document.createElement('div');
      el.className='task';
      el.draggable = true;
      el.dataset.id = t.id;
      const badge = t.deadline==='week1' ? '1w' : (Math.round((t.est||60)/60)+'h');
      el.innerHTML = `
        <div style="display:flex;align-items:center;justify-content:space-between;gap:8px">
          <div style="font-weight:600">${t.title}</div>
          <span style="border:1px solid #2a2f37;border-radius:999px;padding:2px 8px;font-size:12px">${badge}</span>
        </div>
        <div style="display:flex;gap:6px;flex-wrap:wrap;margin-top:6px">
          ${(t.tags||[]).map(x=>`<span style="border:1px solid #2a2f37;border-radius:999px;padding:2px 8px;font-size:12px;color:#cbd2db">${x}</span>`).join('')}
        </div>`;
      el.addEventListener('dragstart',(e)=>{
        e.dataTransfer.setData('application/json', JSON.stringify({type:'task', id:t.id}));
      });
      backlogEl.appendChild(el);
    }
  }

  function renderGrid(){
    const wk = weekKey(weekStart);
    const placements = (state.schedules[wk]?.placements)||[];
    const days = Array.from({length:7}).map((_,i)=>{ const d=new Date(weekStart); d.setDate(d.getDate()+i); return d });
    // header
    gridEl.innerHTML='';
    const topLeft = document.createElement('div'); topLeft.className='gridHeader'; gridEl.appendChild(topLeft);
    const dayFmt=new Intl.DateTimeFormat(undefined,{weekday:'short',month:'short',day:'numeric'});
    for(const d of days){ const hd=document.createElement('div'); hd.className='gridHeader'; hd.textContent=dayFmt.format(d); gridEl.appendChild(hd); }
    // rows
    for(let hr=HOUR_START; hr<HOUR_END; hr++){
      const side=document.createElement('div'); side.className='gridSide'; const d=new Date(weekStart); d.setHours(hr,0,0,0); side.textContent=fmtHM(d); gridEl.appendChild(side);
      for(let di=0; di<7; di++){
        const cell=document.createElement('div'); cell.className='gridCell'; const date=new Date(weekStart); date.setDate(date.getDate()+di); date.setHours(hr,0,0,0);
        const id=`${toISODate(date)}T${String(hr).padStart(2,'0')}:00`; cell.dataset.slot=id;
        cell.addEventListener('dragover', e=>{ e.preventDefault(); cell.classList.add('ghost') });
        cell.addEventListener('dragleave', ()=> cell.classList.remove('ghost'));
        cell.addEventListener('drop', e=>{
          e.preventDefault(); cell.classList.remove('ghost');
          try{
            const data=JSON.parse(e.dataTransfer.getData('application/json'));
            if(data.type==='task'){
              const task = state.backlog.find(x=>x.id===data.id); if(!task) return;
              if(task.deadline==='week1'){ createWeekSpan(task); } else { createPlacement(task, id); }
            }
            if(data.type==='move'){ movePlacement(data.pid, id); }
          }catch{}
        });
        gridEl.appendChild(cell);
      }
    }
    // show placements
    const visible = placements.filter(p => trainerFilter==='ALL' ? true : p.trainer===trainerFilter);
    for(const p of visible){ addPlacementEl(p); }

    const end = new Date(weekStart); end.setDate(end.getDate()+6);
    weekLabelEl.textContent = `Week of ${weekStart.toLocaleDateString()} — ${end.toLocaleDateString()}`;
    updateCapacity();
  }

  function addPlacementEl(p){
    const cell = document.querySelector(`.gridCell[data-slot="${p.slot}"]`);
    if(!cell) return;
    const el = document.createElement('div');
    el.className='placement'; el.dataset.pid=p.id; el.dataset.trainer=p.trainer;
    el.style.borderLeft = `4px solid ${trainerColor[p.trainer]}`;
    el.draggable = true;
    el.addEventListener('dragstart',(e)=>{
      e.dataTransfer.setData('application/json', JSON.stringify({type:'move', pid:p.id}));
    });
    el.innerHTML = `<div>
        <div style="font-weight:600;font-size:14px">${p.title}</div>
        <div style="font-size:12px;color:#cbd2db">${Math.round((p.est||60)/60)}h • ${trainerNames[p.trainer]}</div>
      </div>
      <div style="display:flex;gap:6px">
        <button class="btn" data-act="back" type="button">Backlog</button>
        <button class="btn" data-act="del" type="button">✕</button>
      </div>`;
    el.addEventListener('click', (e)=>{
      const act = e.target?.dataset?.act;
      if(act==='del') delPlacement(p.id);
      if(act==='back') backToBacklog(p.id);
    });
    cell.appendChild(el);
  }

  function updateCapacity(){
    const wk = weekKey(weekStart);
    const placements = (state.schedules[wk]?.placements)||[];
    const visible = placements.filter(p => trainerFilter==='ALL' ? true : p.trainer===trainerFilter);
    const hours = Math.round(visible.reduce((a,b)=>a+(b.est||60),0)/60);
    capFillEl.style.width = Math.min(100, hours/WEEK_CAPACITY_HOURS*100) + '%';
    capTextEl.textContent = `${hours}/${WEEK_CAPACITY_HOURS}h`;
  }

  // --- Mutations ---
  function createPlacement(task, slot){
    const wk=weekKey(weekStart);
    const trainer = (trainerFilter==='ALL' ? 'A' : trainerFilter);
    const p = { id:'p_'+Math.random().toString(36).slice(2,9), taskId:task.id, title:task.title, est:task.est||60, slot, trainer };
    if(!state.schedules[wk]) state.schedules[wk] = { placements: [] };
    state.schedules[wk].placements.push(p);
    state.backlog = state.backlog.filter(x=>x.id!==task.id);
    save(); renderBacklog(); addPlacementEl(p); updateCapacity();
  }
  function createWeekSpan(task){
    const wk=weekKey(weekStart);
    const trainer = (trainerFilter==='ALL' ? 'A' : trainerFilter);
    if(!state.schedules[wk]) state.schedules[wk] = { placements: [] };
    for(let i=0;i<5;i++){
      const d = new Date(weekStart); d.setDate(d.getDate()+i);
      const slot = `${toISODate(d)}T${String(HOUR_START).padStart(2,'0')}:00`;
      state.schedules[wk].placements.push({
        id:'p_'+Math.random().toString(36).slice(2,9),
        taskId:task.id, title:task.title+' (Week focus)',
        est:(HOUR_END-HOUR_START)*60, slot, trainer
      });
    }
    state.backlog = state.backlog.filter(x=>x.id!==task.id);
    save(); renderBacklog(); renderGrid();
  }
  function movePlacement(pid, newSlot){
    const wk=weekKey(weekStart); const list=state.schedules[wk]?.placements||[];
    const p = list.find(x=>x.id===pid); if(!p) return; p.slot=newSlot; save(); renderGrid();
  }
  function delPlacement(pid){
    const wk=weekKey(weekStart); const list=state.schedules[wk]?.placements||[];
    const i=list.findIndex(x=>x.id===pid); if(i===-1) return; list.splice(i,1); save(); renderGrid();
  }
  function backToBacklog(pid){
    const wk=weekKey(weekStart); const list=state.schedules[wk]?.placements||[];
    const i=list.findIndex(x=>x.id===pid); if(i===-1) return;
    const p=list[i];
    state.backlog.push({ id:p.taskId, title:p.title, est:p.est, tags:['From calendar'], priority:3 });
    list.splice(i,1); save(); renderBacklog(); renderGrid();
  }

  // --- ICS Export ---
  function toUtcStamp(d){ const pad=n=>String(n).padStart(2,'0'); return d.getUTCFullYear()+pad(d.getUTCMonth()+1)+pad(d.getUTCDate())+'T'+pad(d.getUTCHours())+pad(d.getUTCMinutes())+pad(d.getUTCSeconds())+'Z' }
  function exportICS(){
    const wk=weekKey(weekStart); const placements=(state.schedules[wk]?.placements)||[];
    const visible = placements.filter(p => trainerFilter==='ALL' ? true : p.trainer===trainerFilter);
    const lines=['BEGIN:VCALENDAR','VERSION:2.0','PRODID:-//Weekly Planner//EN','CALSCALE:GREGORIAN','METHOD:PUBLISH'];
    for(const p of visible){
      const start=new Date(p.slot); const end=new Date(start.getTime()+(p.est||60)*60000);
      lines.push('BEGIN:VEVENT','UID:'+p.id+'@weekly-planner','SUMMARY:'+p.title.replace(/[\\r\\n]/g,' '),
        'DESCRIPTION:'+(trainerNames[p.trainer]||'Trainer'),'DTSTAMP:'+toUtcStamp(new Date()),'DTSTART:'+toUtcStamp(start),'DTEND:'+toUtcStamp(end),'END:VEVENT');
    }
    lines.push('END:VCALENDAR');
    const blob = new Blob([lines.join('\\r\\n')], {type:'text/calendar;charset=utf-8'});
    const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=`weekly-planner-${wk}.ics`; a.click(); setTimeout(()=>URL.revokeObjectURL(a.href),0);
  }

  // --- Events ---
  $('#search').addEventListener('input', renderBacklog);
  $('#clearBtn').addEventListener('click', ()=>{ state={backlog:[],schedules:{}}; save(); renderBacklog(); renderGrid(); });
  $('#prevWeek').addEventListener('click', ()=>{ weekStart.setDate(weekStart.getDate()-7); renderGrid(); });
  $('#nextWeek').addEventListener('click', ()=>{ weekStart.setDate(weekStart.getDate()+7); renderGrid(); });
  $('#exportIcs').addEventListener('click', exportICS);

  // trainer tabs
  $$('#trainerSwitch .pill').forEach(p=>{
    p.addEventListener('click', ()=>{
      $$('#trainerSwitch .pill').forEach(x=>x.dataset.active='false');
      p.dataset.active='true';
      trainerFilter = p.dataset.id;
      renderGrid();
    });
  });

  // modal
  const modal=$('#modal'), mTitle=$('#m_title'), mHours=$('#m_hours'), mSpan=$('#m_span'), mPriority=$('#m_priority'), mTags=$('#m_tags');
  const openModal=()=>{ modal.style.display='flex'; setTimeout(()=>mTitle.focus(),0); };
  const closeModal=()=>{ modal.style.display='none'; };
  $('#newBtn').addEventListener('click', openModal);
  $('#fab').addEventListener('click', openModal);
  $('#m_cancel').addEventListener('click', closeModal);
  modal.addEventListener('click', (e)=>{ if(e.target===modal) closeModal(); });
  document.addEventListener('keydown', (e)=>{ if(e.key==='Escape' && modal.style.display==='flex') closeModal(); });
  $('#m_create').addEventListener('click', ()=>{
    const title=(mTitle.value||'').trim(); if(!title) return alert('Enter a title');
    const est=Math.round(Math.max(0.5, parseFloat(mHours.value||'1'))*60);
    const deadline=mSpan.value; const priority=parseInt(mPriority.value,10)||2; const tags=(mTags.value||'').split(',').map(s=>s.trim()).filter(Boolean);
    state.backlog.push({id:'t_'+Math.random().toString(36).slice(2,9), title, est, tags, priority, deadline});
    save(); closeModal(); renderBacklog();
  });

  // --- Boot ---
  renderBacklog();
  renderGrid();
})();
</script>
</body>
</html>"""

with open("/mnt/data/index.html", "w", encoding="utf-8") as f:
    f.write(html)

"/mnt/data/index.html"
